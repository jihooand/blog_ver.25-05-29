spring.application.name=blog
server.port=8090
server.servlet.context-path=/

# MySql
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/testdb?serverTimezone=Asia/Seoul
# spring.datasource.url=jdbc:mysql://127.0.0.1:3306/testdb?serverTimezone=Asia/Seoul
spring.datasource.username=shop
spring.datasource.password=My123456789!!s

# JPA 설정
# 실행되는 쿼리를 콘솔로 (개발환경(스테이징환경)에서만 사용하기, 운영환경에서는 사용하지 않음)
spring.jpa.properties.hibernate.show_sql = true

# 콘솔장에 출력되는 쿼리를 가독성이 좋게 포맷팅 - 개발환경에서만 사용할 것
spring.jpa.properties.hibernate.format_sql = true

# 쿼리에 물음표로 출력되는 바인드 파라미터 출력
logging.level.org.hibernate.type.descriptor.sql = trace

# jpa 초기화 전략(방법) 설정
spring.jpa.hibernate.ddl-auto=update
# *** 주의 :  개발환경에서만 이렇게 사용할 것
#              운영환경에서는 none 또는  validate를 사용해서 정상적인 매핑 관계만 확인
# create : 실무(운영환경)에서는 절대 사용하면 안됨, 기존 테이블 삭제 후 테이블을 생성하기 때문
# create-drop : 실무(운영환경)에서는 절대 사용하면 안됨, 기존 테이블을 삭제 후 테이블을 생성, 종료 시점에 테이블 삭제
# update : 실무환경에서는 절대 사용하면 안됨, 변경된 스키마 적용
# validate : 엔티티와 테이블 정상 매핑 확인
# none : ddl 처리 하지 않음, 운영 서버에서는 테이블 생성 및 컬럼 추가, 삭제, 변경은  데이터베이스에서 직접함

# jpa에 MySQL 사용을 알려주기
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# 애플리케이션을 실행할 때 테이블을 생성하고 data.sql 파일에 있는 쿼리를 실행하도록 하는 옵션
spring.jpa.defer-datasource-initialization=true
